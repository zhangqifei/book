(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{365:function(e,a,r){"use strict";r.r(a);var n=r(43),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"apache-web服务器企业实战"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#apache-web服务器企业实战"}},[e._v("#")]),e._v(" Apache Web服务器企业实战")]),e._v(" "),r("p",[e._v("Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等Web客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。目前最主流的三个Web服务器是Apache Nginx IIS。")]),e._v(" "),r("p",[r("strong",[e._v("目前主流的WEB服务器软件包括:")])]),e._v(" "),r("ol",[r("li",[e._v("Apache是世界使用排名第一的Web服务器软件。")]),e._v(" "),r("li",[e._v("Nginx的HTTP服务器。")]),e._v(" "),r("li",[e._v("Lighttpd服务器。")]),e._v(" "),r("li",[e._v("IIS是微软公司主推的服务器。")]),e._v(" "),r("li",[e._v("Resin提供了最快的jsp/servlets运行平台。")]),e._v(" "),r("li",[e._v("Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。")]),e._v(" "),r("li",[e._v("BEA WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。")]),e._v(" "),r("li",[e._v("Jetty是一个开源的servlet容器，它为基于Java的web内容，例如JSP和servlet提供运行环境。")])]),e._v(" "),r("h2",{attrs:{id:"apache-web服务器入门简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#apache-web服务器入门简介"}},[e._v("#")]),e._v(" Apache Web服务器入门简介")]),e._v(" "),r("p",[e._v("Apache HTTP Server（简称Apache）是Apache软件基金会的一个开放源码的网页服务器，可以在大多数计算机操作系统中运行，由于其多平台和安全性被广泛使用，是最流行的Web服务器端软件之一。")]),e._v(" "),r("p",[e._v("Apache HTTP服务器是一个模块化的服务器，源于NCSAhttpd服务器，经过多次修改，成为世界使用排名第一的Web服务器软件。Apache取自“a patchy server”的读音，意思是充满补丁的服务器，因为它是自由软件，所以不断有人来为它开发新的功能、新的特性、修改原来的缺陷。")]),e._v(" "),r("p",[e._v("Apache的特点是简单、速度快、性能稳定，并可做代理服务器来使用。")]),e._v(" "),r("h2",{attrs:{id:"prefork-mpm工作原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#prefork-mpm工作原理"}},[e._v("#")]),e._v(" Prefork MPM工作原理")]),e._v(" "),r("p",[e._v("每辆汽车都有发动机引擎，不同的引擎，对车子运行效率也不一样，同样apache也有类似的工作引擎或者处理请求的模块，称之为多路处理模块（Multi-Processing Modules，MPM），Apache WEB服务器有三种处理模块Prefork MPM、Worker MPM、Event MPM。")]),e._v(" "),r("p",[e._v('在企业中Apache最常用的是Prefork MPM、Worker MPM。Event MPM不支持HTTPS，官网也给出了"This MPM is experimental, so it may or may not work as expected ."的提示，所以Event MPM很少使用。')]),e._v(" "),r("p",[e._v("默认的Apache处理模块为prefork MPM方式，prefork采用的预派生子进程方式。prefork用单独的子进程来处理不同的请求，进程之间是彼此独立的，所以比较稳定。")]),e._v(" "),r("p",[e._v("prefork MPM 的工作原理：控制进程master在最初建立“StartServers”个进程后，为了满足“MinspareServers”设置的最小空闲进程，所以需创建第一个空闲进程，等待一秒钟，继续创建两个，在等待一秒钟，继续创建四个，依次按照递增指数级创建进程数，最多每秒同时创建32个空闲进程，直到满足至少有“MinspareServers”设置的值为止。如果空闲进程数大于这个值，Apache会自动kill掉一些多余进程。这个值不要设得过大，但如果设的值比“MinSpareServers”小，Apache会自动把其调整为“MinSpareServers+1”。如果站点负载较大，可考虑同时加大“MinSpareServers”和“MaxSpareServers”。")]),e._v(" "),r("p",[e._v("Apache的预派生模式（prefork），基于预派生模式不必再请求到来时在产生新的进程，从而减小了系统开销以增加性能，不过由于Prefork MPM引擎是基于多进程方式提供对外服务，每个进程占内存也相对较高。")]),e._v(" "),r("img",{attrs:{src:e.$withBase("/http/prefork.jpg"),alt:"prefork MPM"}}),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("prefork：多进程I/O模型，每个进程响应一个请求，默认模型\n    一个主进程：生成和回收n个子进程，创建套接字，不响应请求\n    多个子进程：工作work进程，每个子进程处理一个请求；系统初始时，预先生成多个空闲进程，等待请求，最大不超过1024个\n")])])]),r("h2",{attrs:{id:"worker-mpm工作原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#worker-mpm工作原理"}},[e._v("#")]),e._v(" Worker MPM工作原理")]),e._v(" "),r("p",[e._v("相对于Prefork MPM, Worker方式是2.0版中全新的支持多线程和多进程混合模型的MPM，由于使用线程来处理，所以可以处理海量的HTTP请求，而系统资源的开销要小于基于Prefork多进程的方式。worker也是基于多进程，但每个进程又生出多个线程，这样可以保证多线程可以获得进程的稳定性。")]),e._v(" "),r("p",[e._v("Worker MPM的工作原理，控制进程master在最建立“StartServers”个进程，每个进程会创建“ ThreadsPerChild ”设置的线程数，多个线程共享该进程的内存空间，同时每个线程独立地处理用户的HTTP请求，为了不在请求到来时在生成线程，worker MPM也可以设置最大最小空闲线程数。")]),e._v(" "),r("p",[e._v("Worker MPM模式下同时处理的请求总数=进程总数* ThreadsPerChild, 也即等于MaxClients。如果服务器负载很高，当前进程数不满足需求,Master控制进程会fork 新的进程，最大进进程不能超过Serverlimit数，如果需调整的StartServers进程数，需同时调整ServerLimit值。")]),e._v(" "),r("img",{attrs:{src:e.$withBase("/http/worker.jpg"),alt:"worker MPM"}}),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("worker：复用的多进程I/O模型,多进程多线程，IIS使用此模型\n    一个主进程：生成m个子进程，每个子进程负责生个n个线程，每个线程响应一个请求，并发响应请求：m*n\n")])])]),r("h2",{attrs:{id:"event-mpm工作原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#event-mpm工作原理"}},[e._v("#")]),e._v(" Event MPM工作原理")]),e._v(" "),r("p",[e._v("这个是Apache中最新的模式，在现在版本里的已经是稳定可用的模式。它和worker模式很像，最大的区别在于，它解决了keep-alive场景下，长期被占用的线程的资源浪费问题（某些线程因为被keep-alive，空挂在哪里等待，中间几乎没有请求过来，甚至等到超时）。event MPM中，会有一个专门的线程来管理这些keep-alive类型的线程，当有真实请求过来的时候，将请求传递给服务线程，执行完毕后，又允许它释放。这样增强了高并发场景下的请求处理能力。")]),e._v(" "),r("p",[e._v("event MPM在遇到某些不兼容的模块时，会失效，将会回退到worker模式，一个工作线程处理一个请求。官方自带的模块，全部是支持event MPM的。")]),e._v(" "),r("p",[e._v("注意一点，event MPM需要Linux系统（Linux 2.6+）对EPoll的支持，才能启用。")]),e._v(" "),r("p",[e._v("还有，需要补充的是HTTPS的连接（SSL），它的运行模式仍然是类似worker的方式，线程会被一直占用，知道连接关闭。部分比较老的资料里，说event MPM不支持SSL，那个说法是几年前的说法，现在已经支持了。")]),e._v(" "),r("img",{attrs:{src:e.$withBase("/http/event.jpg"),alt:"event MPM"}}),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("event：事件驱动模型（worker模型的变种）\n    一个主进程：生成m个子进程，每个进程直接响应n个请求，并发响应请求：m*n，有专门的线程来管理这些keep-alive类型的线程，当有真实请求时，将请求传递给服务线程，执行完毕后，又允许释放。这样增强了高并发场景下的请求处理能力\n    httpd-2.2: event测试版，centos6默认\n    httpd-2.4：event稳定版，centos7默认\n")])])]),r("h2",{attrs:{id:"prefork、worker与event引擎区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#prefork、worker与event引擎区别"}},[e._v("#")]),e._v(" Prefork、Worker与Event引擎区别")]),e._v(" "),r("p",[e._v("使用命令"),r("code",[e._v("httpd -V")]),e._v("查看=我们Apache的模式，及具体内容。")]),e._v(" "),r("p",[e._v("Prefork MPM模式：使用多个进程。每个进程只有一个线程，每个进程在某个确定的时间只能维持一个连接，优点是稳定，但内存开销较高。")]),e._v(" "),r("p",[e._v("worker MPM模式：使用多个进程。每个进程包含多个线程，每个线程在某个确定的时间只能维持一个连接，内存占用量比较小，适合大并发、高流量的Web服务器。Wokker MPM缺点是一个线程崩溃，整个进程就会连同其任何线程一起挂掉。")]),e._v(" "),r("p",[e._v("event MPM模式：prefork和Worker方式在非常繁忙的服务器应用下都有些不足。尽管HTTP的Keepalive方式能减少TCP连接数量和网络负载，但是 Keepalive需要和服务进程或者线程绑定，这就导致一个繁忙的服务器会耗光所有的线程。 Event MPM是解决这个问题的一种新模型，它把服务进程从连接中分离出来。在服务器处理速度很快，同时具有非常高的点击率时，可用的线程数量就是关键的资源限 制，此时Event MPM方式是最有效的。一个以Worker MPM方式工作的繁忙服务器能够承受每秒好几万次的访问量（例如在大型新闻服务站点的高峰时），而Event MPM可以用来处理更高负载。event和work有相同之处，都是通过线程来处理请求；一个父进程建立多个子进程，而子进程又会建立多个线程。")]),e._v(" "),r("h2",{attrs:{id:"apache-web服务器安装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#apache-web服务器安装"}},[e._v("#")]),e._v(" Apache Web服务器安装")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("版本:\n    CentOS6: 2.2\n    CentOS7: 2.4\n安装方式：\n    rpm：centos发行版，稳定，建议使用\n    编译：定制或特殊需求\n")])])]),r("p",[r("strong",[e._v("以下是编译安装httpd-2.4.35")])]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("1.查询是否安装了apache服务器httpd\n[root@centos7 ~]# rpm -qa|grep httpd\nhttpd-2.4.6-45.el7.centos.x86_64\nhttpd-tools-2.4.6-45.el7.centos.x86_64\n\n2.卸载系统自动装的apache服务器httpd\n[root@centos7 ~]# httpd -k stop     #停止httpd服务器\n[root@centos7 ~]# yum remove httpd    #卸载httpd服务器\n\n3.下载httpd并解压\n[root@centos7 ~]# http://mirrors.hust.edu.cn/apache/httpd/httpd-2.4.35.tar.bz2\n[root@centos7 ~]# tar -xjvf httpd-2.4.35.tar.bz2\ntar (child): lbzip2: Cannot exec: No such file or directory \ntar (child): Error is not recoverable: exiting now \ntar: Child returned status 2 \ntar: Error is not recoverable: exiting now\n解决方法很简单，只要安装bzip2就行了，yum安装的命令如下：\nyum -y install bzip2\n\n4.安装需要依赖的安装包或者模块\nyum -y install gcc-c++ \nyum groupinstall \"development tools\"\nyum install openssl-devel pcre-devel expat-devel apr-devel apr-util-devel -y\n\n5.预编译Apache\ncd httpd-2.4.35/\n./configure\nmake && make install\n\n6.编译完成的Httpd的配置文件位于/usr/local/apache2/conf/httpd.conf,我们需要先做个简单的设置，复杂的设置后期可以参考文档自行设置：\nuseradd -r -s /sbin/nologin apache //创建apache 系统用户\nsed -i.bak 's/#ServerName/ServerName/g' /usr/local/apache2/conf/httpd.conf\nsed -i 's/User daemon/User apache/' /usr/local/apache2/conf/httpd.conf\nsed -i 's/Group daemon/Group apache/' /usr/local/apache2/conf/httpd.conf\n\n7.将httpd服务加入开机启动，并添加执行权限\necho \"/usr/local/apache2/bin/apachectl start\" >> /etc/rc.d/rc.local\nchmod +x /etc/rc.d/rc.local\n\n[root@localhost rc.d]# tail -n1 /etc/rc.d/rc.local  \n/usr/local/apache2/bin/apachectl start\n[root@localhost rc.d]# ll /etc/rc.d/rc.local\n-rw-r--r--. 1 root root 512 10月 12 15:27 /etc/rc.d/rc.local\n\n8.环境变量\necho \"PATH=/usr/local/apache2/bin:\\$PATH\" > /etc/profile.d/httpd.sh\nsource /etc/profile.d/httpd.sh\n\n9.关闭防火墙和关闭SELINUX\nsystemctl stop firewlld\nsed -i.bak 's/SELINUX=enforcing/SELINUX=permissive/' /etc/selinux/config && setenforce 0 && getenforce\n\n10.启动httpd服务，浏览器访问当前主机的IP即可。\napachectl start\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br"),r("span",{staticClass:"line-number"},[e._v("12")]),r("br"),r("span",{staticClass:"line-number"},[e._v("13")]),r("br"),r("span",{staticClass:"line-number"},[e._v("14")]),r("br"),r("span",{staticClass:"line-number"},[e._v("15")]),r("br"),r("span",{staticClass:"line-number"},[e._v("16")]),r("br"),r("span",{staticClass:"line-number"},[e._v("17")]),r("br"),r("span",{staticClass:"line-number"},[e._v("18")]),r("br"),r("span",{staticClass:"line-number"},[e._v("19")]),r("br"),r("span",{staticClass:"line-number"},[e._v("20")]),r("br"),r("span",{staticClass:"line-number"},[e._v("21")]),r("br"),r("span",{staticClass:"line-number"},[e._v("22")]),r("br"),r("span",{staticClass:"line-number"},[e._v("23")]),r("br"),r("span",{staticClass:"line-number"},[e._v("24")]),r("br"),r("span",{staticClass:"line-number"},[e._v("25")]),r("br"),r("span",{staticClass:"line-number"},[e._v("26")]),r("br"),r("span",{staticClass:"line-number"},[e._v("27")]),r("br"),r("span",{staticClass:"line-number"},[e._v("28")]),r("br"),r("span",{staticClass:"line-number"},[e._v("29")]),r("br"),r("span",{staticClass:"line-number"},[e._v("30")]),r("br"),r("span",{staticClass:"line-number"},[e._v("31")]),r("br"),r("span",{staticClass:"line-number"},[e._v("32")]),r("br"),r("span",{staticClass:"line-number"},[e._v("33")]),r("br"),r("span",{staticClass:"line-number"},[e._v("34")]),r("br"),r("span",{staticClass:"line-number"},[e._v("35")]),r("br"),r("span",{staticClass:"line-number"},[e._v("36")]),r("br"),r("span",{staticClass:"line-number"},[e._v("37")]),r("br"),r("span",{staticClass:"line-number"},[e._v("38")]),r("br"),r("span",{staticClass:"line-number"},[e._v("39")]),r("br"),r("span",{staticClass:"line-number"},[e._v("40")]),r("br"),r("span",{staticClass:"line-number"},[e._v("41")]),r("br"),r("span",{staticClass:"line-number"},[e._v("42")]),r("br"),r("span",{staticClass:"line-number"},[e._v("43")]),r("br"),r("span",{staticClass:"line-number"},[e._v("44")]),r("br"),r("span",{staticClass:"line-number"},[e._v("45")]),r("br"),r("span",{staticClass:"line-number"},[e._v("46")]),r("br"),r("span",{staticClass:"line-number"},[e._v("47")]),r("br"),r("span",{staticClass:"line-number"},[e._v("48")]),r("br"),r("span",{staticClass:"line-number"},[e._v("49")]),r("br"),r("span",{staticClass:"line-number"},[e._v("50")]),r("br"),r("span",{staticClass:"line-number"},[e._v("51")]),r("br"),r("span",{staticClass:"line-number"},[e._v("52")]),r("br"),r("span",{staticClass:"line-number"},[e._v("53")]),r("br"),r("span",{staticClass:"line-number"},[e._v("54")]),r("br")])]),r("h2",{attrs:{id:"apache虚拟主机企业应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#apache虚拟主机企业应用"}},[e._v("#")]),e._v(" Apache虚拟主机企业应用")]),e._v(" "),r("p",[e._v("企业正式环境中，一台WEB服务器发布单个网站非常浪费资源，所以一台WEB服务器上会发布多个网站，少则3~5，多则2~30个网站。在一台服务器上发布多个网站，也称为部署多个虚拟主机，WEB虚拟主机配置方法有以下三种：")]),e._v(" "),r("ul",[r("li",[e._v("单个单IP多个socker端口；")]),e._v(" "),r("li",[e._v("基于多IP地址的一个端口；")]),e._v(" "),r("li",[e._v("基于单IP一个端口不同域名；")])]),e._v(" "),r("p",[e._v("其中基于同一端口不同域名的方式在企业中得到广泛应用。以下是基于一个端口不同域名，在一台Apache WEB服务器上部署多个网站：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('1.修改httpd.conf文件的480行处，去掉"#"号，开启虚拟主机\nvim /usr/local/apache2/conf/httpd.conf\nInclude conf/extra/httpd-vhosts.conf //480行处去掉前面的"#"号\n\n2.编辑/usr/local/apache2/conf/extra/httpd-vhosts.conf中的代码\n<VirtualHost *:80>\n    ServerAdmin 1353250703@qq.com\n    DocumentRoot "/usr/local/apache2/htdocs/aaa.com"\n    ServerName www.aaa.com\n    ServerAlias www.aaaaaa.com\n    ErrorLog "logs/aaa.com-error_log"\n    CustomLog "logs/aaa.com-access_log" common\n</VirtualHost>\n<VirtualHost *:80>\n    ServerAdmin 1353250703@qq.com\n    DocumentRoot "/usr/local/apache2/htdocs/bbb.com"\n    ServerName www.bbb.com\n    ServerAlias www.bbbbbb.com\n    ErrorLog "logs/bbb.com-error_log"\n    CustomLog "logs/bbb.com-access_log" common\n</VirtualHost>\n配置说明：\n<VirtualHost *:80>                                    # 虚拟主机配置的起始\n    ServerAdmin 1353250703@qq.com                     # 管理员邮箱\n    DocumentRoot "/usr/local/apache2/htdocs/aaa.com"  # 虚拟主机发布目录\n    ServerName www.aaa.com                            # 虚拟主机完整域名\n    ServerAlias www.aaaaaa.com                        # 设定主机的候补域名\n    ErrorLog "logs/aaa.com-error_log"                 # 错误日志路径及文件名\n    CustomLog "logs/aaa.com-access_log" common        # 访问日志路径及文件名\n</VirtualHost>\n\n3. 创建www.aaa.com、www.bbb.com发布目录\nmkdir -p /usr/local/apache2/htdocs/{aaa,bbb}.com/\n\n4. 创建发布目录的index.html页面\necho aaa.com > /usr/local/apache2/htdocs/aaa.com/index.html\necho bbb.com > /usr/local/apache2/htdocs/bbb.com/index.html\n\n5. 编辑/etc/hosts文件，添加一下代码\necho "192.168.77.140 www.aaa.com www.bbb.com www.aaaaaa.com www.bbbbbb.com" >>/etc/hosts\n\n6.使用curl浏览器访问\n[root@localhost ~]# curl www.aaa.com\naaa.com \n[root@localhost ~]# curl www.aaaa.com\n^C\n[root@localhost ~]# curl www.aaaaaa.com\naaa.com\n[root@localhost ~]# curl www.bbb.com    \nbbb.com\n[root@localhost ~]# curl www.bbbb.com \n^C\n[root@localhost ~]# curl www.bbbbbb.com\nbbb.com\n\n7.在Windows中查看\n编辑 C:\\Windows\\System32\\drivers\\etc\\hosts 文件最后添加下面一行代码，之后使用浏览器查看。\n192.168.77.140 www.aaa.com www.aaaaaa.com www.bbb.com www.bbbbbb.com\n')])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br"),r("span",{staticClass:"line-number"},[e._v("12")]),r("br"),r("span",{staticClass:"line-number"},[e._v("13")]),r("br"),r("span",{staticClass:"line-number"},[e._v("14")]),r("br"),r("span",{staticClass:"line-number"},[e._v("15")]),r("br"),r("span",{staticClass:"line-number"},[e._v("16")]),r("br"),r("span",{staticClass:"line-number"},[e._v("17")]),r("br"),r("span",{staticClass:"line-number"},[e._v("18")]),r("br"),r("span",{staticClass:"line-number"},[e._v("19")]),r("br"),r("span",{staticClass:"line-number"},[e._v("20")]),r("br"),r("span",{staticClass:"line-number"},[e._v("21")]),r("br"),r("span",{staticClass:"line-number"},[e._v("22")]),r("br"),r("span",{staticClass:"line-number"},[e._v("23")]),r("br"),r("span",{staticClass:"line-number"},[e._v("24")]),r("br"),r("span",{staticClass:"line-number"},[e._v("25")]),r("br"),r("span",{staticClass:"line-number"},[e._v("26")]),r("br"),r("span",{staticClass:"line-number"},[e._v("27")]),r("br"),r("span",{staticClass:"line-number"},[e._v("28")]),r("br"),r("span",{staticClass:"line-number"},[e._v("29")]),r("br"),r("span",{staticClass:"line-number"},[e._v("30")]),r("br"),r("span",{staticClass:"line-number"},[e._v("31")]),r("br"),r("span",{staticClass:"line-number"},[e._v("32")]),r("br"),r("span",{staticClass:"line-number"},[e._v("33")]),r("br"),r("span",{staticClass:"line-number"},[e._v("34")]),r("br"),r("span",{staticClass:"line-number"},[e._v("35")]),r("br"),r("span",{staticClass:"line-number"},[e._v("36")]),r("br"),r("span",{staticClass:"line-number"},[e._v("37")]),r("br"),r("span",{staticClass:"line-number"},[e._v("38")]),r("br"),r("span",{staticClass:"line-number"},[e._v("39")]),r("br"),r("span",{staticClass:"line-number"},[e._v("40")]),r("br"),r("span",{staticClass:"line-number"},[e._v("41")]),r("br"),r("span",{staticClass:"line-number"},[e._v("42")]),r("br"),r("span",{staticClass:"line-number"},[e._v("43")]),r("br"),r("span",{staticClass:"line-number"},[e._v("44")]),r("br"),r("span",{staticClass:"line-number"},[e._v("45")]),r("br"),r("span",{staticClass:"line-number"},[e._v("46")]),r("br"),r("span",{staticClass:"line-number"},[e._v("47")]),r("br"),r("span",{staticClass:"line-number"},[e._v("48")]),r("br"),r("span",{staticClass:"line-number"},[e._v("49")]),r("br"),r("span",{staticClass:"line-number"},[e._v("50")]),r("br"),r("span",{staticClass:"line-number"},[e._v("51")]),r("br"),r("span",{staticClass:"line-number"},[e._v("52")]),r("br"),r("span",{staticClass:"line-number"},[e._v("53")]),r("br"),r("span",{staticClass:"line-number"},[e._v("54")]),r("br"),r("span",{staticClass:"line-number"},[e._v("55")]),r("br"),r("span",{staticClass:"line-number"},[e._v("56")]),r("br"),r("span",{staticClass:"line-number"},[e._v("57")]),r("br"),r("span",{staticClass:"line-number"},[e._v("58")]),r("br")])]),r("h2",{attrs:{id:"apache常用目录学习"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#apache常用目录学习"}},[e._v("#")]),e._v(" Apache常用目录学习")]),e._v(" "),r("p",[e._v("Apache可以基于源码安装，YUM安装，不同的安装方法，所属的路径也不相同")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("/etc/httpd/conf              # Apache配置文件目录\n/usr/lib64/httpd/modules/    # Apache模块存放路径\n/var/www/html/               # YUM安装Apache网站发布目录\n/usr/share/httpd/error/      # 服务器设置错误信息\n/usr/share/httpd/icons/      # Apache小图标文件存放目录\n/var/www/cgi-bin/            # 可执行的CGI程序存放目录\n/var/log/httpd/              # Apache日志目录\n/usr/sbin/apachectl          # Apache启动脚本\n/usr/sbin/httpd              # Apache二进制执行文件\n/usr/bin/htpasswd            # 设置Apache目录访问密码\n\n/usr/local/apache2/bin       # Apache命令目录\n/usr/local/apache2/build     # Apache构建编译目录\n/usr/local/apache2/htdocs    # 源码安装Apache网站发布目录\n/usr/local/apache2/cgi-bin   # 可执行的CGI程序存放目录\n/usr/local/apache2/include   # Apache引用配置文件目录\n/usr/local/apache2/logs      # Apache日志目录\n/usr/local/apache2/man       # Apache帮助文档目录\n/usr/local/apache2/manual    # Apache手册\n/usr/local/apache2/modules   # Apache模块路径\n/usr/local/apache2/error/    # 服务器设置错误信息\n/usr/local/apache2/icons/    # Apache小图标文件存放目录\n/usr/local/apache2/conf/     # Apache配置文件目录           \n")])])]),r("h2",{attrs:{id:"apache配置文件详解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#apache配置文件详解"}},[e._v("#")]),e._v(" Apache配置文件详解")]),e._v(" "),r("p",[e._v("/etc/httpd/conf/httpd.conf是Apache的主配文件，整个Apache也不过就是这个配置文件，里面几乎包含了所有的配置。有的distribution都将这个文件拆分成数个小文件分别管理不同的参数。但是主要配置文件还是以这个文件为主。只要找到这个文件名就知道如何设置了。后面会详细解释Apache主配文件的每一行配置。"),r("a",{attrs:{href:"https://httpd.apache.org/docs/2.4/zh-cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("【官方文档参考】"),r("OutboundLink")],1),e._v("。"),r("a",{attrs:{href:"http://archive.apache.org/dist/apr/",target:"_blank",rel:"noopener noreferrer"}},[e._v("【apr下载】"),r("OutboundLink")],1)]),e._v(" "),r("h3",{attrs:{id:"httpd-conf配置文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#httpd-conf配置文件"}},[e._v("#")]),e._v(" httpd.conf配置文件")]),e._v(" "),r("p",[e._v("1、显示服务器版本信息")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("ServerTokens Prod  显示“Server: Apache”\nServerTokens Major 显示“Server: Apache/2″\nServerTokens Minor 显示“Server: Apache/2.2″\nServerTokens Min   显示“Server: Apache/2.2.17″\nServerTokens OS    显示“Server: Apache/2.2.17 (Unix)”\nServerTokens Full  显示“Server: Apache/2.2.17 (Unix) PHP/5.3.5″ (如果你这指定任何的值，这个是默认的返回信息)\n")])])]),r("p",[e._v("2、设置httpd.pid的路径")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("PidFile run/httpd.pid     # 默认run/httpd.pid\n")])])]),r("p",[e._v("3、ServerRoot 配置")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('ServerRoot "/etc/httpd" \n\n【ServerRoot "" 主要用于指定Apache的安装路径，此选项参数值在安装Apache时系统会自动把Apache的路径写入。Windows安装时，该选项的值为Windows安装的路径，Linux安装时该选项值为编译时选择的路径】\n')])])]),r("p",[e._v("4、Mutex default:logs")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("Mutex default:logs\n\n【互斥：允许你为多个不同的互斥对象设置互斥机制和互斥文件目录，或者修改全局默认值。如果互斥对象是基于文件的以及默认的互斥文件目录不在本地磁盘或因为其它原因而不适用，那么取消注释并改变目录。下面这个命令是改变互斥对象的目录。】\n")])])]),r("p",[e._v("5、监听指定IP和端口")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("Listen 80                 # 127.0.0.1:80 监听指定IP和端口，如果同时监控81端口，可以在下面增加一行，如:listen 81。\n")])])]),r("p",[e._v("6、加载conf.modules.d/目录下的配置文件")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("Include conf.modules.d/*.conf  # 加载conf.modules.d/目录下的配置文件\n")])])]),r("p",[e._v("7、Apache运行用户配置")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<IfModule unixd_module>\n    User daemon               # apache的用户，默认为daemon\n    Group daemon              # apache的用户，默认为daemon\n</IfModule>\n")])])]),r("p",[e._v("8、Apache服务默认管理员地址设置")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("ServerAdmin root@localhost\n\n【此选项主要用指定Apache服务管理员通知邮箱地址，选择默认值即可，如果有真实的邮箱地址也可以设置此值】\n")])])]),r("p",[e._v("9、Apache的默认服务名及端口设置")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("ServerName www.example.com:80\n\n【此选项主要用指定Apache默认的服务器名以及端口，默认参数值设置为：ServerName localhost:80即可】\n")])])]),r("p",[e._v("10、 Apache的根目录访问控制设置")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<Directory />\n    AllowOverride none\n    Require all denied\n</Directory>\n\n【AllowOverride None 表示禁止用户对目录配置文件（.htaccess进行修改）重载，普通站点目录此项建议不开启（AllowOverride all 表示开启）】\n【Require all denied=Order allow,deny 拒绝所有访问请求】\n【Require all granted=Order deny,allow 允许所有访问请求】\n【Allow from all:允许所有客户机访问】\n【此选项主要是针对用户对根目录下所有的访问权限控制，默认Apache对根目录访问都是拒绝访问。后面会继续讲到】\n")])])]),r("p",[e._v("11、Apache的默认网站根目录设置及访问控制")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('DocumentRoot "/usr/local/apache2/htdocs"\n<Directory "/usr/local/apache2/htdocs">\n    Options Indexes FollowSymLinks  MultiViews  Includes  IncludesNOEXEC  ExecCGI\n    AllowOverride None\n    Require all granted\n</Directory>\n\n【Options：控制在特定目录中将使用哪些服务器特性。】\n【Indexes：若访问目录下无index文件，则准许显示该目录下的文件列表以供选择。-Indexes禁止浏览目录】\n【FollowSymLinks：准许在目录中使用符号链接到其他目录。】\n【MultiViews：准许内容协商的“多重视图”。如果客户端请求的路径可能对应多种类型的文件，服务器将根据客户端请求的具体情况自动选择一个最匹配客户端要求的文件。例如只在地址栏输入index也可以访问到index.php页面。】\n【Includes：准许SSI。】\n【IncludesNOEXEC：准许SSI，但不可使用exec和include功能。】\n【ExecCGI：准许在该目录下使用CGI。】\n【All：表示除了MultiViews之外的所有特性。】\n【None：表示不启用任何的服务器特性。】\n【注意：如果一个目录被多次设置了options，则最特殊的一个会被完全接受。】\n【此区域的配置文件，主要是针对Apache默认网站根目录的设置以及相关的权限访问设置，默认对网站的根目录具有访问权限，此选项默认值即可】\n')])])]),r("p",[e._v("12、Apache的默认首页设置")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<IfModule dir_module>\n    DirectoryIndex index.html\n</IfModule>\n\n【此区域文件主要设置Apache默认支持的首页，默认只支持:index.html首页，如要支持其他类型的首页，需要在此区域添加:如index.php表示支持index.php类型首页】\n")])])]),r("p",[e._v("13、Apache关于.ht文件访问配置")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('<Files ".ht*">\n    Require all denied\n</Files>\n\n【此选项主要是针对.ht文件访问控制，默认为具有访问权限，此区域文件默认即可】\n')])])]),r("p",[e._v("14、Apache关于日志文件配置")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('ErrorLog "logs/error_log"\nLogLevel warn\n<IfModule log_config_module>\n    LogFormat "%h %l %u %t \\"%r\\" %>s %b \\"%{Referer}i\\" \\"%{User-Agent}i\\"" combined\n    LogFormat "%h %l %u %t \\"%r\\" %>s %b" common\n\n    <IfModule logio_module>\n    LogFormat "%h %l %u %t \\"%r\\" %>s %b \\"%{Referer}i\\" \\"%{User-Agent}i\\" %I %O" combinedio\n    </IfModule>\n\n    CustomLog "logs/access_log" combined\n</IfModule>\n\n【LogLevel：用于调整记录在错误日志中的信息的详细程度。\n错误信息详细程度按重要性降序排列如下：\n    emerg：紧急（系统无法使用）\n    alert：必须立即采取措施。\n    crit：致命情况。\n    error：错误情况。\n    warn：警告情况。\n    notice：一般重要情况。\n    info：普通信息。\n    debug：调试信息。\n（当指定了某个级别时，所有级别高于它的信息也会被同时记录）】\n【LogFormat：定义访问日志的记录格式】\n【CustomLog：设定日志的文件名和格式】\n【TransferLog：指定日志文件的位置。】\n【LogFormat】\n【%h 客户端IP地址】\n【%l  远程用户,启用mod_ident才有效，通常为减号“-”】\n【%u  验证（basic，digest）远程用户,非登录访问时，为一个减号“-”】\n【%t 服务器收到请求时的时间】\n【%r First line of request，即表示请求报文的首行；记录了此次请求的“方法”，“URL”以及协议版本】\n【%>s 响应状态码】\n【%b 响应报文的大小，单位是字节；不包括响应报文http首部】\n【%{Referer}i 请求报文中首部“referer”的值；即从哪个页面中的超链接跳转至当前页面的】\n【%{User-Agent}i 请求报文中首部“User-Agent”的值；即发出请求的应用程序】\n【此区域文件主要是针对Apache默认的日志级别，默认的访问日志路径，默认的错误日志路径等相关设置，此选项内容默认即可】\n')])])]),r("p",[e._v("15、URL重定向，cgi模块配置说明")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('<IfModule alias_module>\n    ScriptAlias /cgi-bin/ "/usr/local/apache2/cgi-bin/"\n</IfModule>\n<Directory "/usr/local/apache2/cgi-bin">\n    AllowOverride None\n    Options None\n    Require all granted\n</Directory>\n\n【ScriptAlias：映射一个URL到文件系统并视之为CGI脚本目录】\n【此区域文件主要包含一些URL重定向，别名，脚本别名等相关设置，以及一些特定的处理程序，比如cgi设置说明。后期会继续说道】\n')])])]),r("p",[e._v("16、如果你的请求头和足够了解，可以通过mod_headers实现更多缓存策略")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<IfModule headers_module>\n    RequestHeader unset Proxy early\n</IfModule>\n")])])]),r("p",[e._v("17、MIME媒体文件，以及相关http文件解析配置说明")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<IfModule mime_module>\n    TypesConfig /etc/mime.types\n    AddType application/x-compress .Z\n    AddType application/x-gzip .gz .tgz\n    AddType text/html .shtml\n    AddOutputFilter INCLUDES .shtml\n</IfModule>\nAddDefaultCharset UTF-8\n<IfModule mime_magic_module>\n    MIMEMagicFile conf/magic\n</IfModule>\n\n【DefaultType：当服务器无法确定一个文档的内容类型时发送的默认MIME内容类型\n    配置示例：\n    DefaultType  text/plain   （纯文本，浏览器在内部打开）\n    DefaultType  application/octet-stream   （浏览器提示用户进行保存）】\n【AddType：为特定后缀的文件指定MIME类型，这里的设置将覆盖mime.types中的设置。\n    配置示例：\n    AddType  application/x-httpd-php  .php .html .htm   （前导点可带可不带）】\n【此区域文件主要包含一些mime文件支持，以及添加一些指令在给定的文件扩展名与特定的内容类型之间建立映射关系，比如添加对php文件扩展名映射关系。】\n")])])]),r("p",[e._v("18、服务器页面提示设置")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('# Customizable error responses come in three flavors:\n# 1) plain text 2) local redirects 3) external redirects\n#\n# Some examples:\n#ErrorDocument 500 "The server made a boo boo."\n#ErrorDocument 404 /missing.html\n#ErrorDocument 404 "/cgi-bin/missing_handler.pl"\n#ErrorDocument 402 http://www.example.com/subscription_info.html\n\n【ErrorDocument：批示当遇到错误的时候服务器将给客户端什么样的应答。\n    语法：\n    ErrorDocument  error-code  document\n    其中error-code时服务器返回的错误代码，document是回应的数据，可以是简单的文本，\n    本地网页，本地CGI程序，或远程主机上的网页。\n    配置示例：\n    ErrorDocument  500  "The server made a boo boo."\n    ErrorDocument  402  http://www.example.com/subscription_info.html】\n')])])]),r("p",[e._v("19、EnableSendfile on")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("【EnableSendfile：控制httpd是否可以使用操作系统内核的sendfile支持来将文件发送到户端。\n    配置示例：\n    EnableMMAP off\n    （这个sendfile机制避免了分开的读和写操作以及缓冲区分配，但是在一些平台或文件系统上会引发一些问题）】\n")])])]),r("p",[e._v("20、EnableMMAP  Off\n【EnableMMAP：指示httpd在递送中如果需要读取一个文件的内容，是否可以使用内存映射。\n配置示例：\nEnableMMAP  On\nEnableMMAP  Off\n（这种内存映射有时会带来性能的提高，有时却会出现问题）】\n21、Apache服务器补充设置")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("IncludeOptional conf.d/*.conf\n\n【在Apache安装目录下的conf.d/目录中有一些补充配置文件，可以根据需要，通过配置将它们包含到主配置文件conf/httpd.conf文件中。】\n")])])]),r("p",[e._v("22、用于使用https连接服务器等设置的地方")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<IfModule ssl_module>\n    SSLRandomSeed startup builtin\n    SSLRandomSeed connect builtin\n</IfModule>\n")])])]),r("p",[e._v("23、conf/extra/目录下文件详解")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("# 服务器池管理（MPM特定）\nInclude conf/extra/httpd-mpm.conf\n\n＃多语言错误消息\n#Include conf/extra/httpd-multilang-errordoc.conf\n\n＃花哨的目录列表\n#Include conf/extra/httpd-autoindex.conf\n\n＃ 语言设定\n#Include conf/extra/httpd-languages.conf\n\n＃用户主目录\n#Include conf/extra/httpd-userdir.conf\n\n＃有关请求和配置的实时信息\n#Include conf/extra/httpd-info.conf\n            \n＃虚拟主机\n包括conf conf/extra/httpd-vhosts.conf\n           \n＃本地访问Apache HTTP Server手册\n#Include conf conf/extra/httpd-manual.conf\n      \n＃分布式创作和版本控制（WebDAV）\n#Include conf/extra/httpd-dav.conf\n    \n＃各种默认设置\n#Include conf/extra/httpd-default.conf\n")])])]),r("h3",{attrs:{id:"httpd-mpm-conf"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#httpd-mpm-conf"}},[e._v("#")]),e._v(" httpd-mpm.conf")]),e._v(" "),r("p",[e._v("查看Apache的工作模式")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("httpd -l\napachectl -l    （apache2.4版本以后，这两条命令不会显示prefork模式，需用下两条命令判断）\n\nhttpd -V 都可以查看apache的运行模式\nhttpd -M 可以查看apache加载的模块\n    httpd -M |grep prefork  可以查看某个模块加载详情。\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br")])]),r("blockquote",[r("p",[e._v("Apache httpd 能更好的为有特殊要求的站点定制。例如，要求 更高伸缩性的站点可以选择使用线程的 MPM，即 worker 或 event； 需要可靠性或者与旧软件兼容的站点可以使用 prefork。")])]),e._v(" "),r("p",[e._v("以下三种模式，使用哪种模式就去掉前面的“#”，默认是prefork模式。")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("LoadModule mpm_prefork_module modules/mod_mpm_prefork.so\n#LoadModule mpm_worker_module modules/mod_mpm_worker.so\n#LoadModule mpm_event_module modules/mod_mpm_event.so\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br")])]),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<IfModule mpm_prefork_module>\n    StartServers    8\n    MinSpareServers 5\n    MaxSpareServers 20\n    ServerLimit 4096\n    MaxRequestWorkers   4096\n    MaxConnectionsPerChild 4000\n</IfModule>\n\nStartServers    8    //默认是5，启动Apache的时候，唤醒几个PID来处理服务的。Apache使用了进程预派生的技术来处理请求，大大提高了响应速度\nMinSpareServers 5    //默认是5，最小空闲进程数，当空闲子进程数小于5时，那么apache将会立刻生成新的子进程。\nMaxSpareServers 20   //默认是10，最大空闲进程数，当空闲子进程数超过20时，那么父进程会杀死多余的子进程，当我们的网站负载过大，可以适当加大MinSpareServers和MaxSpareServers\nServerLimit 4096     //服务器的限制\nMaxRequestWorkers   4096     //apache所能接受的http请求数。当请求超过4096时，多余的请求会进入请求队列，直到前面的请求处理完。当我们的服务器剩余资源很多但访问很慢时，我们就要看看这个参数是不是设置太低。当然MaxRequestWorkers默认值为250,当要增大此值时，也要增加serverlimit，但是serverlimit最大为20000。不过要注意的是：这个值并非越大越好因为他会消耗物理内存（与process有关），所以如果你设置太高导致超出物理内存,能够容许的范围，那么效率就会大大降低（因为会跑SWAP），此外，MaxRequestWorkers也在Apache编译的时候就指定最大值了，所以你也无法超出系统最大值，除非你重新编译Apache MaxConnectionsPerChild  4000。apache2.3.1以后的版本MaxClients称为MaxRequestWorkers\nMaxConnectionsPerChild 4000  //MaxConnectionsPerChild每个进程生存期内允许服务的最大请求数量，0表示永不结束。每个程序能够提供的最大传输次数要求。举例来说：如果有个用户连上服务器之后，要求数百个网页，当他的要求数量超过这个值的时候则该程序会被丢弃，另外切换一个新程序。这个设置可以有效地管理每个process在系统上存活的时间。根据观察所得，新程序的效果较好。0表示子进程永不销毁，虽然能够接受更多的请求，但可能会造成内存泄漏。这里建议设置为非零，注意原因： 1).能够防止(偶然的)内存泄漏无限进行，从而耗尽内存。 2).给进程一个有限寿命，从而有助于当服务器负载减轻的时候减少活动进程的数量(重生的机会)。在Apache2.3.9之前的版本是MaxRequestsPerChild。\n")])])]),r("hr"),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<IfModule mpm_worker_module> \n    StartServers    8  \n    MinSpareThreads 25\n    MaxSpareThreads 75\n    ThreadsPerChild 75\n    MaxRequestWorkers  4000 \n    MaxConnectionsPerChild 0\n</IfModule>\n\nStartServers    8  // 默认启动apache工作进程数\nMinSpareThreads 25  // 最小空闲进程数\nMaxSpareThreads 75  // 最大空闲进程数\nThreadsPerChild 75  // 每个进程启动的线程数\nMaxRequestWorkers  4000 // 每秒支持的最大客户端并发\nMaxConnectionsPerChild 0  // 每个进程能处理的最大请求数，0表示无限制。\n为Apache配置线程访问，即每对WEB服务访问启动一个线程，这样对内存占用率比较小。\nServerLimit服务器允许配置进程数的上限。\nThreadLimit每个子进程可能配置的线程上限\nStartServers启动8个httpd进程，\nMaxRequestWorkers同时最多能发起4000个访问，超过的要进入队列等待，其大小有ServerLimit和ThreadsPerChild的乘积决定\nThreadsPerChild每个子进程生存期间常驻执行线程数，子线程建立之后将不再增加\nMaxConnectionsPerChild每个进程启动的最大线程数，如达到限制数时进程将结束，如置为0则子线程永不结束\n")])])]),r("hr"),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<IfModule mpm_event_module>\n    ServerLimit 1000\n    StartServers    20   \n    MinSpareThreads 25\n    MaxSpareThreads 1200 \n    ThreadsPerChild 50\n    MaxRequestWorkers   2000     \n    MaxConnectionsPerChild  1000\n</IfModule>\n\nServerLimit 1000\nStartServers    20   # apache启动后建立20个子进程，由于默认的Serverlimit 为16，当我们StartServers大于16时，会报错“changing ServerLimit to 1000 from original value of 16 not allowed during restart”，但是我们可以通过Serverlimit来重新设置，不过需要先停止apache服务再启动，直接restart无效。\nMinSpareThreads 25   # 最小空闲线程数\nMaxSpareThreads 1200 # 最大空闲线程数，这里要注意这个值必须要大于StartServers*ThreadsPerChild=20*50=1000，如若我们MaxSpareThreads 800，小于1000，则StartServers-MaxSpareThreads/50=4，则有4个进程会被杀掉，我们可以通过top查看，restart后会生成多个进程，当过一会多余的进程会被kill掉\nThreadsPerChild 50   # 每个进程可以生成50个线程，这里要注意的是默认的ThreadLimit为64，当我们ThreadsPerChild大于64时，会报错“ThreadsPerChild of 500 exceeds ThreadLimit of 64,decreasing to match”，但是我们可以通过ThreadLimit来重新设置，不过需要先停止apache服务再启动，直接restart无效。\nMaxRequestWorkers   2000     # 最大数量的工作线程，等于ServerLimit*ThreadPerChild，如果按照默认的ServerLimit=16的话，2000>16*50，日志中会报错“MaxRequestWorkers of 1000 would require 20 servers and exceed ServerLimit of 16, decreasing to 800”，这时我们需要通过修改ServerLimit，需要先停止apache服务再启动，直接restart无效。\nMaxConnectionsPerChild  1000 # 每个进程所能建立的最大连接数\n")])])]),r("h2",{attrs:{id:"require指令进行访问控制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#require指令进行访问控制"}},[e._v("#")]),e._v(" require指令进行访问控制")]),e._v(" "),r("p",[e._v("Apache2.4使用require指令进行访问控制--允许或限制IP访问/通过User-Agent禁止不友好网络爬虫")]),e._v(" "),r("h3",{attrs:{id:"允许所有访问请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#允许所有访问请求"}},[e._v("#")]),e._v(" 允许所有访问请求")]),e._v(" "),r("p",[r("strong",[e._v("Apache2.4下的配置")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<Directory xxx/www/yoursite>\n    <RequireAll>\n        Require all granted\n    </RequireAll>\n</Directory> \n")])])]),r("h3",{attrs:{id:"拒绝所有访问请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#拒绝所有访问请求"}},[e._v("#")]),e._v(" 拒绝所有访问请求")]),e._v(" "),r("p",[r("strong",[e._v("Apache2.4下的配置")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<Directory xxx/www/yoursite>\n    <RequireAll>\n        Require all denied\n    </RequireAll>\n</Directory>\n")])])]),r("h3",{attrs:{id:"只允许来自特定域名主机的访问请求，其他请求将被拒绝"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#只允许来自特定域名主机的访问请求，其他请求将被拒绝"}},[e._v("#")]),e._v(" 只允许来自特定域名主机的访问请求，其他请求将被拒绝")]),e._v(" "),r("p",[r("strong",[e._v("Apache2.4下的配置")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<Directory xxx/www/yoursite>\n    <RequireAll>\n        Require host google.com\n    </RequireAll>\n</Directory>\n")])])]),r("h3",{attrs:{id:"只允许来自特定ip或ip段的访问请求，其他请求将被拒绝"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#只允许来自特定ip或ip段的访问请求，其他请求将被拒绝"}},[e._v("#")]),e._v(" 只允许来自特定IP或IP段的访问请求，其他请求将被拒绝")]),e._v(" "),r("p",[r("strong",[e._v("Apache2.4下的配置")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<Directory xxx/www/yoursite>\n    <RequireAll>\n        Require ip 192.120 192.168.100 192.168.1.1\n    </RequireAll>\n</Directory>\n")])])]),r("h3",{attrs:{id:"允许所有访问请求，但拒绝来自特定ip或ip段的访问请求（阻止恶意ip或恶意爬虫网段的访问）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#允许所有访问请求，但拒绝来自特定ip或ip段的访问请求（阻止恶意ip或恶意爬虫网段的访问）"}},[e._v("#")]),e._v(" 允许所有访问请求，但拒绝来自特定IP或IP段的访问请求（阻止恶意IP或恶意爬虫网段的访问）")]),e._v(" "),r("p",[r("strong",[e._v("Apache2.4下的配置")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<Directory xxx/www/yoursite>\n    <RequireAll>\n        Require all granted\n        Require not ip 192.168.1.1\n        Require not ip 192.120 192.168.100\n    </RequireAll>\n</Directory>\n")])])]),r("h3",{attrs:{id:"允许所有访问请求，但拒绝某些user-agent的访问请求（通过user-agent屏蔽垃圾网络爬虫）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#允许所有访问请求，但拒绝某些user-agent的访问请求（通过user-agent屏蔽垃圾网络爬虫）"}},[e._v("#")]),e._v(" 允许所有访问请求，但拒绝某些User-Agent的访问请求（通过User-Agent屏蔽垃圾网络爬虫）")]),e._v(" "),r("p",[e._v("使用mod_setenvif通过正则表达式匹配来访请求的User-Agent，并设置内部环境变量BADBOT，最后拒绝BADBOT的访问请求。")]),e._v(" "),r("p",[r("strong",[e._v("Apache2.4下的配置")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('<Directory xxx/www/yoursite>\n    SetEnvIfNoCase User-Agent ".*(FeedDemon|JikeSpider|AskTbFXTV|CrawlDaddy|Feedly|Swiftbot|ZmEu|oBot).*" BADBOT\n    SetEnvIfNoCase User-Agent "brandwatch" BADBOT\n    SetEnvIfNoCase User-Agent "rogerbot" BADBOT\n    <RequireAll>\n        Require all granted\n        Require not env BADBOT\n        Require not ip 192.168.100.1\n    </RequireAll>\n</Directory>\n')])])]),r("h3",{attrs:{id:"其它require访问控制指令用法如下："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其它require访问控制指令用法如下："}},[e._v("#")]),e._v(" 其它require访问控制指令用法如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("Require all granted #允许所有\nRequire all denied #拒绝所有\nRequire env env-var [env-var] ... #允许匹配环境变量中任意一个\nRequire method http-method [http-method] ... #允许特定的HTTP方法（GET/POST/HEAD/OPTIONS）\nRequire expr expression #允许，表达式为true\nRequire user userid [ userid ] ... #允许特定用户\nRequire group group-name [group-name] ... #允许特定用户组\nRequire valid-user # #允许，有效用户\nRequire ip 192.100 192.168.100 192.168.100.5 #允许特定IP或IP段，多个IP或IP段间使用空格分隔\n")])])]),r("h2",{attrs:{id:"apache-rewrite规则实战"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#apache-rewrite规则实战"}},[e._v("#")]),e._v(" Apache rewrite规则实战")]),e._v(" "),r("h3",{attrs:{id:"rewrite规则简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rewrite规则简介"}},[e._v("#")]),e._v(" Rewrite规则简介")]),e._v(" "),r("p",[e._v("rewrite规则也称为规则重写，主要功能是实现浏览器访问HTTP URL的跳转，其规则表达式是基于perl语言的，通常而言所有的Web服务器均可以支持URL重写。")]),e._v(" "),r("p",[r("strong",[e._v("rewrite URL规则重写用途是")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("对搜索引擎优化友好，利于搜索引擎抓取网站页面。\n隐藏网站URL真实地址，浏览器显示更加美观。\n网站变更升级，可以基于rewrite临时重定向到其他页面。\n")])])]),r("p",[e._v("如果要想用到rewrite模块，必须先安装或加载rewrite模块。方法有两种一种是编译apache的时候就直接安装rewrite模块（--enable-rewrite），别一种是动态添加模块，编译apache时以DSO模式安装apache,然后再利用源码和apxs来安装rewrite模块。")]),e._v(" "),r("p",[e._v("基于服务器级的(httpd.conf)有两种方法，一种是在httpd.conf的全局下直接利用"),r("code",[e._v("RewriteEngine on")]),e._v("来打开rewrite功能;另一种是在局部里利用"),r("code",[e._v("RewriteEngine on")]),e._v("来打开rewrite功能,下面将会举例说明，需要注意的是,必须在每个virtualhost里用"),r("code",[e._v("RewriteEngine on")]),e._v("来打开rewrite功能。否则virtualhost里没有"),r("code",[e._v("RewriteEngine on")]),e._v("它里面的规则也不会生效。")]),e._v(" "),r("p",[e._v("基于目录级的(.htaccess),要注意一点那就是必须打开此目录的FollowSymLinks属性（httpd.conf中的Option FollowSymLinks）且在.htaccess里要声明RewriteEngine on。")]),e._v(" "),r("p",[e._v("三种概念需要了解："),r("strong",[e._v("rewrite结尾标识符")]),e._v("、"),r("strong",[e._v("rewrite规则常用表达式")]),e._v("、"),r("strong",[e._v("Apache rewrite变量")])]),e._v(" "),r("p",[r("strong",[e._v("Apache rewrite结尾标识符")]),e._v("：用于rewrite规则末尾，表示规则的执行属性")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("R[=code](force redirect) 强制外部重定向\n强制在替代字符串加上http://thishost[:thisport]/前缀重定向到外部的URL.如果code不指定，将用缺省的302 HTTP状态码。\nF(force URL to be forbidden)禁用URL,返回403HTTP状态码。\nG(force URL to be gone) 强制URL为GONE，返回410HTTP状态码。\nP(force proxy) 强制使用代理转发。\nL(last rule) 表明当前规则是最后一条规则，停止分析以后规则的重写。\nN(next round) 重新从第一条规则开始运行重写过程。\nC(chained with next rule) 与下一条规则关联\n如果规则匹配则正常处理，该标志无效，如果不匹配，那么下面所有关联的规则都跳过。\nT=MIME-type(force MIME type) 强制MIME类型\nNS (used only if no internal sub-request) 只用于不是内部子请求\nNC(no case) 不区分大小写\nQSA(query string append) 追加请求字符串\nNE(no URI escaping of output) 不在输出转义特殊字符\n例如：RewriteRule /foo/(.*) /bar?arg=P1%3d$1 [R,NE] 将能正确的将/foo/zoo转换成/bar?arg=P1=zed\nPT(pass through to next handler) 传递给下一个处理\n例如：\nRewriteRule ^/abc(.*) /def$1 [PT] # 将会交给/def规则处理\nAlias /def /ghi\nS=num(skip next rule(s)) 跳过num条规则\nE=VAR:VAL(set environment variable) 设置环境变量\n")])])]),r("p",[r("strong",[e._v("Apache rewrite规则常用表达式")]),e._v(":用于匹配参数、字符串及过滤设置。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v(". 匹配任何单字符\n[chars] 匹配字符串:chars\n[^chars] 不匹配字符串:chars\ntext1|text2 可选择的字符串:text1或text2\n? 匹配0到1个字符\n* 匹配0到多个字符\n+ 匹配1到多个字符\n^ 字符串开始标志\n$ 字符串结束标志\n\\n 转义符标志\n反向引用 $N 用于 RewriteRule 中匹配的变量调用(0 <= N <= 9)\n反向引用 %N 用于 RewriteCond 中最后一个匹配的变量调用(1 <= N <= 9)\n")])])]),r("p",[r("strong",[e._v("Apache rewrite变量")]),e._v(":常用与匹配HTTP请求头部信息、浏览器主机名、URL等")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("HTTP headers:HTTP_USER_AGENT, HTTP_REFERER, HTTP_COOKIE, HTTP_HOST, HTTP_ACCEPT\nconnection & request: REMOTE_ADDR, QUERY_STRING\nserver internals: DOCUMENT_ROOT, SERVER_PORT, SERVER_PROTOCOL\nsystem stuff: TIME_YEAR, TIME_MON, TIME_DAY\n\n详解：\nHTTP_USER_AGENT  # 用户使用的代理，例如浏览器\nHTTP_REFERER     # 告知服务器，从哪个页面来访问的\nHTTP_COOKIE      # 客户端缓存，主要用户存储用户名和密码信息\nHTTP_HOST        # 匹配服务器ServerName域名\nHTTP_ACCEPT      # 客户端的浏览器支持的MIME\nREMOTE_ADDR      # 客户端的IP地址\nQUERY_STRING     # URL中访问的字符串\nDOCUMENT_ROOT    # 服务器发布目录\nSERVER_PORT      # 服务器端口\nSERVER_PROTOCOL  # 服务器协议\nTIME_YEAR        # 年\nTIME_MON         # 月\nTIME_DAY         # 日\n")])])]),r("h3",{attrs:{id:"apache-mod-rewrite规则案例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#apache-mod-rewrite规则案例"}},[e._v("#")]),e._v(" Apache mod_rewrite规则案例")]),e._v(" "),r("p",[e._v("将aaa.com跳转到www.aaa.com")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('<VirtualHost *:80>\n    ServerAdmin 1353250703@qq.com\n    DocumentRoot "/usr/local/apache2/htdocs/aaa.com"\n    ServerName www.aaa.com\n    ServerAlias www.aaa.com\n    ErrorLog "logs/aaa.com-error_log"\n    CustomLog "logs/aaa.com-access_log" common\n    RewriteEngine on\n    RewriteCond %{HTTP_HOST}    ^aaa.com    [NC]\n    RewriteRule ^/(.*)$         http://www.aaa.com/$1   [R=301,L]\n</VirtualHost> \n【RewriteEngine on  # 开启rewrite引擎】\n【RewriteCond %{HTTP_HOST} ^aaa.com [NC] # 匹配以aaa.com开头的域名，NC忽略大小写】\n【RewriteRule ^/(.*)$ http://www.aaa.com/$1 [L] # (.*)表示任意字符串，$1表示引用(.*)中任意内容】\n')])])]),r("p",[e._v("将aaa.com、ccc.com、www.ccc.com、跳转到www.aaa.com,OR含义表示或者")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('<VirtualHost *:80>\n    ServerAdmin 1353250703@qq.com\n    DocumentRoot "/usr/local/apache2/htdocs/aaa.com"\n    ServerName www.aaa.com\n    ServerAlias www.aaa.com\n    ErrorLog "logs/aaa.com-error_log"\n    CustomLog "logs/aaa.com-access_log" common\n    RewriteEngine on\n    RewriteCond %{HTTP_HOST}   ^www.ccc.com [NC,OR]\n    RewriteCond %{HTTP_HOST}    ^ccc.com    [NC]\n    RewriteCond %{HTTP_HOST}    ^aaa.com    [NC]\n    RewriteRule ^/(.*)$   http://www.aaa.com/$1   [L,R=301]\n</VirtualHost>\n')])])]),r("p",[e._v("访问www.aaa.com首页时，是跳转到http://www.aaa.com/aaa/，R=301永久重定向")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('<VirtualHost *:80>\n    ServerAdmin 1353250703@qq.com\n    DocumentRoot "/usr/local/apache2/htdocs/aaa.com"\n    ServerName www.aaa.com\n    ServerAlias www.aaa.com\n    ErrorLog "logs/aaa.com-error_log"\n    CustomLog "logs/aaa.com-access_log" common\n    RewriteEngine on\n    RewriteRule ^/$ http://www.aaa.com/aaa/   [L,R=301]\n</VirtualHost>\n')])])]),r("p",[e._v("访问www.aaa.com首页时，内容访问是www.aaa.com/aaa/,但是浏览器URL地址不变。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('<VirtualHost *:80>\n    ServerAdmin 1353250703@qq.com\n    DocumentRoot "/usr/local/apache2/htdocs/aaa.com"\n    ServerName www.aaa.com\n    ServerAlias www.aaa.com\n    ErrorLog "logs/aaa.com-error_log"\n    CustomLog "logs/aaa.com-access_log" common\n    RewriteEngine on\n    RewriteCond %{HTTP_HOST} ^www.aaa.com      [NC]\n    RewriteRule ^/$ /aaa/index.html   [L]\n</VirtualHost>\n')])])]),r("p",[e._v("判断是否使用移动端访问网站，移动端访问跳转至m.aaa.com")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('<VirtualHost *:80>\n    ServerAdmin 1353250703@qq.com\n    DocumentRoot "/usr/local/apache2/htdocs/aaa.com"\n    ServerName www.aaa.com\n    ServerAlias www.aaa.com\n    ErrorLog "logs/aaa.com-error_log"\n    CustomLog "logs/aaa.com-access_log" common\n    RewriteEngine on\n    RewriteCond %{HTTP_USER_AGENT} ^iPhone  [NC,OR]\n    RewriteCond %{HTTP_USER_AGENT} ^Android [NC,OR]\n    RewriteCond %{HTTP_USER_AGENT} ^WAP [NC]\n    RewriteRule ^/$ http://m.aaa.com/index.html  [L,R=301]\n    RewriteRule ^/(.*)/$    http://m.aaa.com/$1  [L,R=301]\n</VirtualHost>\n')])])]),r("p",[e._v("访问/xxx/123456跳转至/xxx?id=123456")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('<VirtualHost *:80>\n    ServerAdmin 1353250703@qq.com\n    DocumentRoot "/usr/local/apache2/htdocs/aaa.com"\n    ServerName www.aaa.com\n    ServerAlias www.aaa.com\n    ErrorLog "logs/aaa.com-error_log"\n    CustomLog "logs/aaa.com-access_log" common\n    RewriteEngine on\n    RewriteRule ^/(.+)/(\\d+)$   /$1?id=$2   [L,R=301]\n</VirtualHost>\n')])])]),r("p",[e._v("访问/106325/aaa/123跳转至/index.php?tid/106325/items=123 ,[0-9]表示任意一个数字，+表示多个，(.+)表示任何多个字符")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('<VirtualHost *:80>\n    ServerAdmin 1353250703@qq.com\n    DocumentRoot "/usr/local/apache2/htdocs/aaa.com"\n    ServerName www.aaa.com\n    ServerAlias www.aaa.com\n    ErrorLog "logs/aaa.com-error_log"\n    CustomLog "logs/aaa.com-access_log" common\n    RewriteEngine on\n    RewriteRule ^/([0-9]+)/aaa/(.+)$    /index.php?tid/$1/items=$2  [L,R=301]\n</VirtualHost>')])])])])}),[],!1,null,null,null);a.default=s.exports}}]);