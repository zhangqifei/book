(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{405:function(_,n,v){"use strict";v.r(n);var t=v(43),o=Object(t.a)({},(function(){var _=this,n=_.$createElement,v=_._self._c||n;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"多态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[_._v("#")]),_._v(" 多态")]),_._v(" "),v("h2",[_._v("目标")]),_._v(" "),v("ul",[v("li",[_._v("多态")])]),_._v(" "),v("p",[v("strong",[_._v("面向对象三大特性")])]),_._v(" "),v("ol",[v("li",[v("strong",[_._v("封装")]),_._v(" 根据 "),v("strong",[_._v("职责")]),_._v(" 将 "),v("strong",[_._v("属性")]),_._v(" 和 "),v("strong",[_._v("方法")]),_._v(" "),v("strong",[_._v("封装")]),_._v(" 到一个抽象的 "),v("strong",[_._v("类")]),_._v(" 中\n"),v("ul",[v("li",[_._v("定义类的准则 ")])])]),_._v(" "),v("li",[v("strong",[_._v("继承")]),_._v(" "),v("strong",[_._v("实现代码的重用")]),_._v("，相同的代码不需要重复的编写\n"),v("ul",[v("li",[_._v("设计类的技巧 ")]),_._v(" "),v("li",[_._v("子类针对自己特有的需求，编写特定的代码")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("多态")]),_._v(" 不同的 "),v("strong",[_._v("子类对象")]),_._v(" 调用相同的 "),v("strong",[_._v("父类方法")]),_._v("，产生不同的执行结果")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("多态")]),_._v(" 可以 "),v("strong",[_._v("增加代码的灵活度")])]),_._v(" "),v("li",[_._v("以 "),v("strong",[_._v("继承")]),_._v(" 和 "),v("strong",[_._v("重写父类方法")]),_._v(" 为前提")]),_._v(" "),v("li",[_._v("是调用方法的技巧，"),v("strong",[_._v("不会影响到类的内部设计")])])]),_._v(" "),v("p",[v("img",{staticStyle:{width:"384px"},attrs:{src:"media/15012536156932/016_%E5%A4%9A%E6%80%81%E7%A4%BA%E6%84%8F%E5%9B%BE.png",alt:"016_多态示意图"}}),_._v("￼")])])]),_._v(" "),v("h2",{attrs:{id:"toc_2"}},[_._v("多态案例演练")]),_._v(" "),v("p",[v("strong",[_._v("需求")])]),_._v(" "),v("ol",[v("li",[_._v("在 "),v("code",[_._v("Dog")]),_._v(" 类中封装方法 "),v("code",[_._v("game")]),_._v(" "),v("ul",[v("li",[_._v("普通狗只是简单的玩耍")])])]),_._v(" "),v("li",[_._v("定义 "),v("code",[_._v("XiaoTianDog")]),_._v(" 继承自 "),v("code",[_._v("Dog")]),_._v("，并且重写 "),v("code",[_._v("game")]),_._v(" 方法\n"),v("ul",[v("li",[_._v("哮天犬需要在天上玩耍")])])]),_._v(" "),v("li",[_._v("定义 "),v("code",[_._v("Person")]),_._v(" 类，并且封装一个 "),v("strong",[_._v("和狗玩")]),_._v(" 的方法\n"),v("ul",[v("li",[_._v("在方法内部，直接让 "),v("strong",[_._v("狗对象")]),_._v(" 调用 "),v("code",[_._v("game")]),_._v(" 方法")])])])]),_._v(" "),v("p",[v("img",{staticStyle:{width:"701px"},attrs:{src:"media/15012536156932/016_%E5%A4%9A%E6%80%81.png",alt:"016_多态"}}),_._v("￼")]),_._v(" "),v("p",[v("strong",[_._v("案例小结")])]),_._v(" "),v("ul",[v("li",[v("code",[_._v("Person")]),_._v(" 类中只需要让 "),v("strong",[_._v("狗对象")]),_._v(" 调用 "),v("code",[_._v("game")]),_._v(" 方法，而不关心具体是 "),v("strong",[_._v("什么狗")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("game")]),_._v(" 方法是在 "),v("code",[_._v("Dog")]),_._v(" 父类中定义的")])])]),_._v(" "),v("li",[_._v("在程序执行时，传入不同的 "),v("strong",[_._v("狗对象")]),_._v(" 实参，就会产生不同的执行效果")])]),_._v(" "),v("blockquote",[v("p",[v("strong",[_._v("多态")]),_._v(" 更容易编写出出通用的代码，做出通用的编程，以适应需求的不断变化！")])]),_._v(" "),v("pre",[v("code",{staticClass:"language-python"},[_._v('class Dog(object):\n\n    def __init__(self, name):\n        self.name = name\n\n    def game(self):\n        print("%s 蹦蹦跳跳的玩耍..." % self.name)\n\n\nclass XiaoTianDog(Dog):\n\n    def game(self):\n        print("%s 飞到天上去玩耍..." % self.name)\n\n\nclass Person(object):\n\n    def __init__(self, name):\n        self.name = name\n\n    def game_with_dog(self, dog):\n\n        print("%s 和 %s 快乐的玩耍..." % (self.name, dog.name))\n\n        # 让狗玩耍\n        dog.game()\n\n\n# 1. 创建一个狗对象\n# wangcai = Dog("旺财")\nwangcai = XiaoTianDog("飞天旺财")\n\n# 2. 创建一个小明对象\nxiaoming = Person("小明")\n\n# 3. 让小明调用和狗玩的方法\nxiaoming.game_with_dog(wangcai)\n        \n')])])])}),[],!1,null,null,null);n.default=o.exports}}]);