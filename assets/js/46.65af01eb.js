(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{394:function(_,v,n){"use strict";n.r(v);var t=n(43),s=Object(t.a)({},(function(){var _=this,v=_.$createElement,n=_._self._c||v;return n("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[n("h1",{attrs:{id:"单例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单例"}},[_._v("#")]),_._v(" 单例")]),_._v(" "),n("h2",[_._v("目标")]),_._v(" "),n("ul",[n("li",[_._v("单例设计模式")]),_._v(" "),n("li",[n("code",[_._v("__new__")]),_._v(" 方法")]),_._v(" "),n("li",[_._v("Python 中的单例")])]),_._v(" "),n("h2",{attrs:{id:"toc_2"}},[_._v("01. 单例设计模式")]),_._v(" "),n("ul",[n("li",[n("p",[_._v("设计模式")]),_._v(" "),n("ul",[n("li",[n("strong",[_._v("设计模式")]),_._v(" 是 "),n("strong",[_._v("前人工作的总结和提炼")]),_._v("，通常，被人们广泛流传的设计模式都是针对 "),n("strong",[_._v("某一特定问题")]),_._v(" 的成熟的解决方案")]),_._v(" "),n("li",[_._v("使用 "),n("strong",[_._v("设计模式")]),_._v(" 是为了可重用代码、让代码更容易被他人理解、保证代码可靠性")])])]),_._v(" "),n("li",[n("p",[_._v("单例设计模式")]),_._v(" "),n("ul",[n("li",[n("strong",[_._v("目的")]),_._v(" —— 让 "),n("strong",[_._v("类")]),_._v(" 创建的对象，在系统中 "),n("strong",[_._v("只有")]),_._v(" "),n("strong",[_._v("唯一的一个实例")])]),_._v(" "),n("li",[_._v("每一次执行 "),n("code",[_._v("类名()")]),_._v(" 返回的对象，"),n("strong",[_._v("内存地址是相同的")])])])])]),_._v(" "),n("h3",{attrs:{id:"toc_3"}},[_._v("单例设计模式的应用场景")]),_._v(" "),n("ul",[n("li",[n("strong",[_._v("音乐播放")]),_._v(" 对象")]),_._v(" "),n("li",[n("strong",[_._v("回收站")]),_._v(" 对象")]),_._v(" "),n("li",[n("strong",[_._v("打印机")]),_._v(" 对象")]),_._v(" "),n("li",[_._v("……")])]),_._v(" "),n("h2",{attrs:{id:"toc_4"}},[_._v("02. "),n("code",[_._v("__new__")]),_._v(" 方法")]),_._v(" "),n("ul",[n("li",[_._v("使用 "),n("strong",[_._v("类名()")]),_._v(" 创建对象时，"),n("code",[_._v("Python")]),_._v(" 的解释器 "),n("strong",[_._v("首先")]),_._v(" 会 调用 "),n("code",[_._v("__new__")]),_._v(" 方法为对象 "),n("strong",[_._v("分配空间")])]),_._v(" "),n("li",[n("code",[_._v("__new__")]),_._v(" 是一个 由 "),n("code",[_._v("object")]),_._v(" 基类提供的 "),n("strong",[_._v("内置的静态方法")]),_._v("，主要作用有两个：\n"),n("ul",[n("li",[_._v("1) 在内存中为对象 "),n("strong",[_._v("分配空间")])]),_._v(" "),n("li",[_._v("2) "),n("strong",[_._v("返回")]),_._v(" 对象的引用")])])]),_._v(" "),n("li",[n("code",[_._v("Python")]),_._v(" 的解释器获得对象的 "),n("strong",[_._v("引用")]),_._v(" 后，将引用作为 "),n("strong",[_._v("第一个参数")]),_._v("，传递给 "),n("code",[_._v("__init__")]),_._v(" 方法")])]),_._v(" "),n("blockquote",[n("p",[_._v("重写 "),n("code",[_._v("__new__")]),_._v(" 方法 的代码非常固定！")])]),_._v(" "),n("ul",[n("li",[_._v("重写 "),n("code",[_._v("__new__")]),_._v(" 方法 "),n("strong",[_._v("一定要")]),_._v(" "),n("code",[_._v("return super().__new__(cls)")])]),_._v(" "),n("li",[_._v("否则 Python 的解释器 "),n("strong",[_._v("得不到")]),_._v(" 分配了空间的 "),n("strong",[_._v("对象引用")]),_._v("，"),n("strong",[_._v("就不会调用对象的初始化方法")])]),_._v(" "),n("li",[_._v("注意："),n("code",[_._v("__new__")]),_._v(" 是一个静态方法，在调用时需要 "),n("strong",[_._v("主动传递")]),_._v(" "),n("code",[_._v("cls")]),_._v(" 参数")])]),_._v(" "),n("p",[n("img",{staticStyle:{width:"838px"},attrs:{src:"media/15016413216376/022_%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96.png",alt:"022_对象分配空间和初始化"}}),_._v("￼")]),_._v(" "),n("p",[n("strong",[_._v("示例代码")])]),_._v(" "),n("pre",[n("code",{staticClass:"language-python"},[_._v('class MusicPlayer(object):\n\n    def __new__(cls, *args, **kwargs):\n        # 如果不返回任何结果，\n        return super().__new__(cls)\n\n    def __init__(self):\n        print("初始化音乐播放对象")\n\nplayer = MusicPlayer()\n\nprint(player)\n\n')])]),_._v(" "),n("h2",{attrs:{id:"toc_5"}},[_._v("03. Python 中的单例")]),_._v(" "),n("ul",[n("li",[n("strong",[_._v("单例")]),_._v(" —— 让 "),n("strong",[_._v("类")]),_._v(" 创建的对象，在系统中 "),n("strong",[_._v("只有")]),_._v(" "),n("strong",[_._v("唯一的一个实例")]),_._v(" "),n("ol",[n("li",[_._v("定义一个 "),n("strong",[_._v("类属性")]),_._v("，初始值是 "),n("code",[_._v("None")]),_._v("，用于记录 "),n("strong",[_._v("单例对象的引用")])]),_._v(" "),n("li",[_._v("重写 "),n("code",[_._v("__new__")]),_._v(" 方法")]),_._v(" "),n("li",[_._v("如果 "),n("strong",[_._v("类属性")]),_._v(" "),n("code",[_._v("is None")]),_._v("，调用父类方法分配空间，并在类属性中记录结果")]),_._v(" "),n("li",[_._v("返回 "),n("strong",[_._v("类属性")]),_._v(" 中记录的 "),n("strong",[_._v("对象引用")])])])])]),_._v(" "),n("p",[n("img",{staticStyle:{width:"893px"},attrs:{src:"media/15016413216376/023_%E5%8D%95%E4%BE%8B%E6%B5%81%E7%A8%8B.png",alt:"023_单例流程"}}),_._v("￼")]),_._v(" "),n("pre",[n("code",{staticClass:"language-python"},[_._v("class MusicPlayer(object):\n\n    # 定义类属性记录单例对象引用\n    instance = None\n\n    def __new__(cls, *args, **kwargs):\n\n        # 1. 判断类属性是否已经被赋值\n        if cls.instance is None:\n            cls.instance = super().__new__(cls)\n\n        # 2. 返回类属性的单例引用\n        return cls.instance\n\n")])]),_._v(" "),n("h3",{attrs:{id:"toc_6"}},[_._v("只执行一次初始化工作")]),_._v(" "),n("ul",[n("li",[_._v("在每次使用 "),n("code",[_._v("类名()")]),_._v(" 创建对象时，"),n("code",[_._v("Python")]),_._v(" 的解释器都会自动调用两个方法：\n"),n("ul",[n("li",[n("code",[_._v("__new__")]),_._v(" 分配空间")]),_._v(" "),n("li",[n("code",[_._v("__init__")]),_._v(" 对象初始化")])])]),_._v(" "),n("li",[_._v("在上一小节对 "),n("code",[_._v("__new__")]),_._v(" 方法改造之后，每次都会得到 "),n("strong",[_._v("第一次被创建对象的引用")])]),_._v(" "),n("li",[_._v("但是："),n("strong",[_._v("初始化方法还会被再次调用")])])]),_._v(" "),n("p",[n("strong",[_._v("需求")])]),_._v(" "),n("ul",[n("li",[_._v("让 "),n("strong",[_._v("初始化动作")]),_._v(" 只被 "),n("strong",[_._v("执行一次")])])]),_._v(" "),n("p",[n("strong",[_._v("解决办法")])]),_._v(" "),n("ol",[n("li",[_._v("定义一个类属性 "),n("code",[_._v("init_flag")]),_._v(" 标记是否 "),n("strong",[_._v("执行过初始化动作")]),_._v("，初始值为 "),n("code",[_._v("False")])]),_._v(" "),n("li",[_._v("在 "),n("code",[_._v("__init__")]),_._v(" 方法中，判断 "),n("code",[_._v("init_flag")]),_._v("，如果为 "),n("code",[_._v("False")]),_._v(" 就执行初始化动作")]),_._v(" "),n("li",[_._v("然后将 "),n("code",[_._v("init_flag")]),_._v(" 设置为 "),n("code",[_._v("True")])]),_._v(" "),n("li",[_._v("这样，再次 "),n("strong",[_._v("自动")]),_._v(" 调用 "),n("code",[_._v("__init__")]),_._v(" 方法时，"),n("strong",[_._v("初始化动作就不会被再次执行")]),_._v(" 了")])]),_._v(" "),n("pre",[n("code",{staticClass:"language-python"},[_._v('class MusicPlayer(object):\n\n    # 记录第一个被创建对象的引用\n    instance = None\n    # 记录是否执行过初始化动作\n    init_flag = False\n\n    def __new__(cls, *args, **kwargs):\n\n        # 1. 判断类属性是否是空对象\n        if cls.instance is None:\n            # 2. 调用父类的方法，为第一个对象分配空间\n            cls.instance = super().__new__(cls)\n\n        # 3. 返回类属性保存的对象引用\n        return cls.instance\n\n    def __init__(self):\n\n        if not MusicPlayer.init_flag:\n            print("初始化音乐播放器")\n\n            MusicPlayer.init_flag = True\n\n\n# 创建多个对象\nplayer1 = MusicPlayer()\nprint(player1)\n\nplayer2 = MusicPlayer()\nprint(player2)\n\n')])])])}),[],!1,null,null,null);v.default=s.exports}}]);