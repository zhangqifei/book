(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{395:function(_,v,t){"use strict";t.r(v);var o=t(43),s=Object(o.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"模块和包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块和包"}},[_._v("#")]),_._v(" 模块和包")]),_._v(" "),t("h2",[_._v("目标")]),_._v(" "),t("ul",[t("li",[_._v("模块")]),_._v(" "),t("li",[_._v("包")]),_._v(" "),t("li",[_._v("发布模块")])]),_._v(" "),t("h2",{attrs:{id:"toc_2"}},[_._v("01. 模块")]),_._v(" "),t("h3",{attrs:{id:"toc_3"}},[_._v("1.1 模块的概念")]),_._v(" "),t("blockquote",[t("p",[t("strong",[_._v("模块是 Python 程序架构的一个核心概念")])])]),_._v(" "),t("ul",[t("li",[_._v("每一个以扩展名 "),t("code",[_._v("py")]),_._v(" 结尾的 "),t("code",[_._v("Python")]),_._v(" 源代码文件都是一个 "),t("strong",[_._v("模块")])]),_._v(" "),t("li",[t("strong",[_._v("模块名")]),_._v(" 同样也是一个 "),t("strong",[_._v("标识符")]),_._v("，需要符合标识符的命名规则")]),_._v(" "),t("li",[_._v("在模块中定义的 "),t("strong",[_._v("全局变量")]),_._v(" 、"),t("strong",[_._v("函数")]),_._v("、"),t("strong",[_._v("类")]),_._v(" 都是提供给外界直接使用的 "),t("strong",[_._v("工具")])]),_._v(" "),t("li",[t("strong",[_._v("模块")]),_._v(" 就好比是 "),t("strong",[_._v("工具包")]),_._v("，要想使用这个工具包中的工具，就需要先 "),t("strong",[_._v("导入")]),_._v(" 这个模块")])]),_._v(" "),t("h3",{attrs:{id:"toc_4"}},[_._v("1.2 模块的两种导入方式")]),_._v(" "),t("h4",{attrs:{id:"toc_5"}},[_._v("1）import 导入")]),_._v(" "),t("pre",[t("code",{staticClass:"language-python"},[_._v("import 模块名1, 模块名2 \n")])]),_._v(" "),t("blockquote",[t("p",[_._v("提示：在导入模块时，每个导入应该独占一行")])]),_._v(" "),t("pre",[t("code",{staticClass:"language-python"},[_._v("import 模块名1\nimport 模块名2 \n")])]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("导入之后")]),_._v(" "),t("ul",[t("li",[_._v("通过 "),t("code",[_._v("模块名.")]),_._v(" 使用 "),t("strong",[_._v("模块提供的工具")]),_._v(" —— "),t("strong",[_._v("全局变量")]),_._v("、"),t("strong",[_._v("函数")]),_._v("、"),t("strong",[_._v("类")])])])])]),_._v(" "),t("h5",{attrs:{id:"toc_6"}},[_._v("使用 "),t("code",[_._v("as")]),_._v(" 指定模块的别名")]),_._v(" "),t("blockquote",[t("p",[t("strong",[_._v("如果模块的名字太长")]),_._v("，可以使用 "),t("code",[_._v("as")]),_._v(" 指定模块的名称，以方便在代码中的使用")])]),_._v(" "),t("pre",[t("code",{staticClass:"language-python"},[_._v("import 模块名1 as 模块别名\n")])]),_._v(" "),t("blockquote",[t("p",[_._v("注意："),t("strong",[_._v("模块别名")]),_._v(" 应该符合 "),t("strong",[_._v("大驼峰命名法")])])]),_._v(" "),t("h4",{attrs:{id:"toc_7"}},[_._v("2）from...import 导入")]),_._v(" "),t("ul",[t("li",[_._v("如果希望 "),t("strong",[_._v("从某一个模块")]),_._v(" 中，导入 "),t("strong",[_._v("部分")]),_._v(" 工具，就可以使用 "),t("code",[_._v("from ... import")]),_._v(" 的方式")]),_._v(" "),t("li",[t("code",[_._v("import 模块名")]),_._v(" 是 "),t("strong",[_._v("一次性")]),_._v(" 把模块中 "),t("strong",[_._v("所有工具全部导入")]),_._v("，并且通过 "),t("strong",[_._v("模块名/别名")]),_._v(" 访问")])]),_._v(" "),t("pre",[t("code",{staticClass:"language-python"},[_._v("# 从 模块 导入 某一个工具\nfrom 模块名1 import 工具名\n")])]),_._v(" "),t("ul",[t("li",[_._v("导入之后\n"),t("ul",[t("li",[t("strong",[_._v("不需要")]),_._v(" 通过 "),t("code",[_._v("模块名.")])]),_._v(" "),t("li",[_._v("可以直接使用 "),t("strong",[_._v("模块提供的工具")]),_._v(" —— "),t("strong",[_._v("全局变量")]),_._v("、"),t("strong",[_._v("函数")]),_._v("、"),t("strong",[_._v("类")])])])])]),_._v(" "),t("p",[t("strong",[_._v("注意")])]),_._v(" "),t("blockquote",[t("p",[_._v("如果 "),t("strong",[_._v("两个模块")]),_._v("，存在 "),t("strong",[_._v("同名的函数")]),_._v("，那么 "),t("strong",[_._v("后导入模块的函数")]),_._v("，会 "),t("strong",[_._v("覆盖掉先导入的函数")])])]),_._v(" "),t("ul",[t("li",[_._v("开发时 "),t("code",[_._v("import")]),_._v(" 代码应该统一写在 "),t("strong",[_._v("代码的顶部")]),_._v("，更容易及时发现冲突")]),_._v(" "),t("li",[_._v("一旦发现冲突，可以使用 "),t("code",[_._v("as")]),_._v(" 关键字 "),t("strong",[_._v("给其中一个工具起一个别名")])])]),_._v(" "),t("h5",{attrs:{id:"toc_8"}},[_._v("from...import *（知道）")]),_._v(" "),t("pre",[t("code",{staticClass:"language-python"},[_._v("# 从 模块 导入 所有工具\nfrom 模块名1 import *\n")])]),_._v(" "),t("p",[t("strong",[_._v("注意")])]),_._v(" "),t("blockquote",[t("p",[_._v("这种方式不推荐使用，因为函数重名并没有任何的提示，出现问题不好排查")])]),_._v(" "),t("h3",{attrs:{id:"toc_9"}},[_._v("1.3 模块的搜索顺序[扩展]")]),_._v(" "),t("p",[t("code",[_._v("Python")]),_._v(" 的解释器在 "),t("strong",[_._v("导入模块")]),_._v(" 时，会：")]),_._v(" "),t("ol",[t("li",[_._v("搜索 "),t("strong",[_._v("当前目录")]),_._v(" 指定模块名的文件，"),t("strong",[_._v("如果有就直接导入")])]),_._v(" "),t("li",[_._v("如果没有，再搜索 "),t("strong",[_._v("系统目录")])])]),_._v(" "),t("blockquote",[t("p",[_._v("在开发时，给文件起名，不要和 "),t("strong",[_._v("系统的模块文件")]),_._v(" "),t("strong",[_._v("重名")])])]),_._v(" "),t("p",[t("code",[_._v("Python")]),_._v(" 中每一个模块都有一个内置属性 "),t("code",[_._v("__file__")]),_._v(" 可以 "),t("strong",[_._v("查看模块")]),_._v(" 的 "),t("strong",[_._v("完整路径")])]),_._v(" "),t("p",[t("strong",[_._v("示例")])]),_._v(" "),t("pre",[t("code",{staticClass:"language-python"},[_._v("import random\n\n# 生成一个 0～10 的数字\nrand = random.randint(0, 10)\n\nprint(rand)\n\n")])]),_._v(" "),t("blockquote",[t("p",[_._v("注意：如果当前目录下，存在一个 "),t("code",[_._v("random.py")]),_._v(" 的文件，程序就无法正常执行了！")])]),_._v(" "),t("ul",[t("li",[_._v("这个时候，"),t("code",[_._v("Python")]),_._v(" 的解释器会 "),t("strong",[_._v("加载当前目录")]),_._v(" 下的 "),t("code",[_._v("random.py")]),_._v(" 而不会加载 "),t("strong",[_._v("系统的")]),_._v(" "),t("code",[_._v("random")]),_._v(" 模块")])]),_._v(" "),t("h3",{attrs:{id:"toc_10"}},[_._v("1.4 原则 —— 每一个文件都应该是可以被导入的")]),_._v(" "),t("ul",[t("li",[_._v("一个 "),t("strong",[_._v("独立的 "),t("code",[_._v("Python")]),_._v(" 文件")]),_._v(" 就是一个 "),t("strong",[_._v("模块")])]),_._v(" "),t("li",[_._v("在导入文件时，文件中 "),t("strong",[_._v("所有没有任何缩进的代码")]),_._v(" 都会被执行一遍！")])]),_._v(" "),t("p",[t("strong",[_._v("实际开发场景")])]),_._v(" "),t("ul",[t("li",[_._v("在实际开发中，每一个模块都是独立开发的，大多都有专人负责")]),_._v(" "),t("li",[t("strong",[_._v("开发人员")]),_._v(" 通常会在 "),t("strong",[_._v("模块下方")]),_._v(" "),t("strong",[_._v("增加一些测试代码")]),_._v(" "),t("ul",[t("li",[_._v("仅在模块内使用，而被导入到其他文件中不需要执行")])])])]),_._v(" "),t("h4",{attrs:{id:"toc_11"}},[t("code",[_._v("__name__")]),_._v(" 属性")]),_._v(" "),t("blockquote",[t("ul",[t("li",[t("code",[_._v("__name__")]),_._v(" 属性可以做到，测试模块的代码 "),t("strong",[_._v("只在测试情况下被运行")]),_._v("，而在 "),t("strong",[_._v("被导入时不会被执行")]),_._v("！")])])]),_._v(" "),t("ul",[t("li",[t("code",[_._v("__name__")]),_._v(" 是 "),t("code",[_._v("Python")]),_._v(" 的一个内置属性，记录着一个 "),t("strong",[_._v("字符串")])]),_._v(" "),t("li",[_._v("如果 "),t("strong",[_._v("是被其他文件导入的")]),_._v("，"),t("code",[_._v("__name__")]),_._v(" 就是 "),t("strong",[_._v("模块名")])]),_._v(" "),t("li",[_._v("如果 "),t("strong",[_._v("是当前执行的程序")]),_._v(" "),t("code",[_._v("__name__")]),_._v(" 是 "),t("strong",[t("code",[_._v("__main__")])])])]),_._v(" "),t("p",[t("strong",[_._v("在很多 "),t("code",[_._v("Python")]),_._v(" 文件中都会看到以下格式的代码")]),_._v("：")]),_._v(" "),t("pre",[t("code",{staticClass:"language-python"},[_._v('# 导入模块\n# 定义全局变量\n# 定义类\n# 定义函数\n\n# 在代码的最下方\ndef main():\n    # ...\n    pass\n\n# 根据 __name__ 判断是否执行下方代码\nif __name__ == "__main__":\n    main()\n\n')])]),_._v(" "),t("h2",{attrs:{id:"toc_12"}},[_._v("02. 包（Package）")]),_._v(" "),t("h3",{attrs:{id:"toc_13"}},[_._v("概念")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("包")]),_._v(" 是一个 "),t("strong",[_._v("包含多个模块")]),_._v(" 的 "),t("strong",[_._v("特殊目录")])]),_._v(" "),t("li",[_._v("目录下有一个 "),t("strong",[_._v("特殊的文件")]),_._v(" "),t("code",[_._v("__init__.py")])]),_._v(" "),t("li",[_._v("包名的 "),t("strong",[_._v("命名方式")]),_._v(" 和变量名一致，"),t("strong",[_._v("小写字母")]),_._v(" + "),t("code",[_._v("_")])])]),_._v(" "),t("p",[t("strong",[_._v("好处")])]),_._v(" "),t("ul",[t("li",[_._v("使用 "),t("code",[_._v("import 包名")]),_._v(" 可以一次性导入 "),t("strong",[_._v("包")]),_._v(" 中 "),t("strong",[_._v("所有的模块")])])]),_._v(" "),t("h3",{attrs:{id:"toc_14"}},[_._v("案例演练")]),_._v(" "),t("ol",[t("li",[_._v("新建一个 "),t("code",[_._v("hm_message")]),_._v(" 的 "),t("strong",[_._v("包")])]),_._v(" "),t("li",[_._v("在目录下，新建两个文件 "),t("code",[_._v("send_message")]),_._v(" 和 "),t("code",[_._v("receive_message")])]),_._v(" "),t("li",[_._v("在 "),t("code",[_._v("send_message")]),_._v(" 文件中定义一个 "),t("code",[_._v("send")]),_._v(" 函数")]),_._v(" "),t("li",[_._v("在 "),t("code",[_._v("receive_message")]),_._v(" 文件中定义一个 "),t("code",[_._v("receive")]),_._v(" 函数")]),_._v(" "),t("li",[_._v("在外部直接导入 "),t("code",[_._v("hm_message")]),_._v(" 的包")])]),_._v(" "),t("h3",{attrs:{id:"toc_15"}},[t("code",[_._v("__init__.py")])]),_._v(" "),t("ul",[t("li",[_._v("要在外界使用 "),t("strong",[_._v("包")]),_._v(" 中的模块，需要在 "),t("code",[_._v("__init__.py")]),_._v(" 中指定 "),t("strong",[_._v("对外界提供的模块列表")])])]),_._v(" "),t("pre",[t("code",{staticClass:"language-python"},[_._v("# 从 当前目录 导入 模块列表\nfrom . import send_message\nfrom . import receive_message\n")])]),_._v(" "),t("h2",{attrs:{id:"toc_16"}},[_._v("03. 发布模块（知道）")]),_._v(" "),t("ul",[t("li",[_._v("如果希望自己开发的模块，"),t("strong",[_._v("分享")]),_._v(" 给其他人，可以按照以下步骤操作")])]),_._v(" "),t("h3",{attrs:{id:"toc_17"}},[_._v("3.1 制作发布压缩包步骤")]),_._v(" "),t("h4",{attrs:{id:"toc_18"}},[_._v("1) 创建 setup.py")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("setup.py")]),_._v(" 的文件")])]),_._v(" "),t("pre",[t("code",{staticClass:"language-python"},[_._v('from distutils.core import setup\n\nsetup(name="hm_message",  # 包名\n      version="1.0",  # 版本\n      description="itheima\'s 发送和接收消息模块",  # 描述信息\n      long_description="完整的发送和接收消息模块",  # 完整描述信息\n      author="itheima",  # 作者\n      author_email="itheima@itheima.com",  # 作者邮箱\n      url="www.itheima.com",  # 主页\n      py_modules=["hm_message.send_message",\n                  "hm_message.receive_message"])\n\n')])]),_._v(" "),t("p",[_._v("有关字典参数的详细信息，可以参阅官方网站：")]),_._v(" "),t("p",[t("a",{attrs:{href:"https://docs.python.org/2/distutils/apiref.html"}},[_._v("https://docs.python.org/2/distutils/apiref.html")])]),_._v(" "),t("h4",{attrs:{id:"toc_19"}},[_._v("2) 构建模块")]),_._v(" "),t("pre",[t("code",{staticClass:"language-bash"},[_._v("$ python3 setup.py build\n")])]),_._v(" "),t("h4",{attrs:{id:"toc_20"}},[_._v("3) 生成发布压缩包")]),_._v(" "),t("pre",[t("code",{staticClass:"language-bash"},[_._v("$ python3 setup.py sdist\n")])]),_._v(" "),t("blockquote",[t("p",[_._v("注意：要制作哪个版本的模块，就使用哪个版本的解释器执行！")])]),_._v(" "),t("h3",{attrs:{id:"toc_21"}},[_._v("3.2 安装模块")]),_._v(" "),t("pre",[t("code",{staticClass:"language-bash"},[_._v("$ tar -zxvf hm_message-1.0.tar.gz \n\n$ sudo python3 setup.py install\n")])]),_._v(" "),t("p",[t("strong",[_._v("卸载模块")])]),_._v(" "),t("p",[_._v("直接从安装目录下，把安装模块的 "),t("strong",[_._v("目录")]),_._v(" 删除就可以")]),_._v(" "),t("pre",[t("code",{staticClass:"language-python"},[_._v("$ cd /usr/local/lib/python3.5/dist-packages/\n$ sudo rm -r hm_message*\n")])]),_._v(" "),t("h3",{attrs:{id:"toc_22"}},[_._v("3.3 "),t("code",[_._v("pip")]),_._v(" 安装第三方模块")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("第三方模块")]),_._v(" 通常是指由 "),t("strong",[_._v("知名的第三方团队")]),_._v(" "),t("strong",[_._v("开发的")]),_._v(" 并且被 "),t("strong",[_._v("程序员广泛使用")]),_._v(" 的 "),t("code",[_._v("Python")]),_._v(" 包 / 模块\n"),t("ul",[t("li",[_._v("例如 "),t("code",[_._v("pygame")]),_._v(" 就是一套非常成熟的 "),t("strong",[_._v("游戏开发模块")])])])]),_._v(" "),t("li",[t("code",[_._v("pip")]),_._v(" 是一个现代的，通用的 "),t("code",[_._v("Python")]),_._v(" 包管理工具")]),_._v(" "),t("li",[_._v("提供了对 "),t("code",[_._v("Python")]),_._v(" 包的查找、下载、安装、卸载等功能")])]),_._v(" "),t("p",[_._v("安装和卸载命令如下：")]),_._v(" "),t("pre",[t("code",{staticClass:"language-bash"},[_._v("# 将模块安装到 Python 2.x 环境\n$ sudo pip install pygame\n$ sudo pip uninstall pygame\n\n# 将模块安装到 Python 3.x 环境\n$ sudo pip3 install pygame\n$ sudo pip3 uninstall pygame\n")])]),_._v(" "),t("h4",{attrs:{id:"toc_23"}},[_._v("在 "),t("code",[_._v("Mac")]),_._v(" 下安装 "),t("code",[_._v("iPython")])]),_._v(" "),t("pre",[t("code",{staticClass:"language-bash"},[_._v("$ sudo pip install ipython\n")])]),_._v(" "),t("h4",{attrs:{id:"toc_24"}},[_._v("在 "),t("code",[_._v("Linux")]),_._v(" 下安装 "),t("code",[_._v("iPython")])]),_._v(" "),t("pre",[t("code",{staticClass:"language-bash"},[_._v("$ sudo apt install ipython\n$ sudo apt install ipython3\n")])])])}),[],!1,null,null,null);v.default=s.exports}}]);